from keep_alive import keep_alive
keep_alive()
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

BOT_TOKEN = os.getenv("BOT_TOKEN")

active_users = set()

# /start ржХржорж╛ржирзНржб
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    active_users.add(user_id)
    await update.message.reply_text("тЬЕ Signal рж╢рзБрж░рзБ рж╣рзЯрзЗржЫрзЗ! ржЖржкржирж┐ ржПржЦржи рж╕рж┐ржЧржирж╛рж▓ ржкрж╛ржмрзЗржиред")

# /stop ржХржорж╛ржирзНржб
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    if user_id in active_users:
        active_users.remove(user_id)
    await update.message.reply_text("ЁЯЫС Signal ржмржирзНржз ржХрж░рж╛ рж╣рж▓рзЛред")

# ржкрзНрж░рждрж┐ ржорж┐ржирж┐ржЯрзЗ рж╕рж┐ржЧржирж╛рж▓ ржкрж╛ржарж╛ржирзЛрж░ ржлрж╛ржВрж╢ржи
async def send_signal(context: ContextTypes.DEFAULT_TYPE):
    for user_id in list(active_users):
        try:
            await context.bot.send_message(chat_id=user_id, text="ЁЯУК ржирждрзБржи рж╕рж┐ржЧржирж╛рж▓: BUY EUR/USD")
        except Exception as e:
            print(f"Error sending to {user_id}: {e}")

# ржорзЗржЗржи ржлрж╛ржВрж╢ржи
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рж╛
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))

    # JobQueue ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзНрж░рждрж┐ рзз ржорж┐ржирж┐ржЯрзЗ рж╕рж┐ржЧржирж╛рж▓ ржкрж╛ржарж╛ржирзЛ
    job_queue = app.job_queue
    job_queue.run_repeating(send_signal, interval=60, first=10)

    print("ЁЯдЦ Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()

